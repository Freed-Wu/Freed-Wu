snippet val "overleaf" b
	%%begin novalidate
	$0
	%%end novalidate
snippet macro "\documentclass{ltxdoc}" b
	%    \begin{macro}
	$0
	%    \end{macro}

snippet tab "\usepackage{booktabs}" b
	\begin{tabular}{$1}
		\toprule
		$0\\\\
		\midrule
		\\\\
		\bottomrule
	\end{tabular}
snippet mulc
	\multicolumn{${1:2}}{c}{${VISUAL}$2}
snippet mulr "\usepackage{multirow}"
	\multirow{${1:2}}{*}{${VISUAL}$2}
snippet long "\usepackage{longtable, booktabs}" b
	\begin{longtable}{$1}
		\caption{$2}%
		\label{tab:$3}\\\\
		\toprule
		$4\\\\
		\midrule
		\endfirsthead
		\caption{$2 (continued)}\\\\
		\toprule
		$4\\\\
		\midrule
		\endhead
		\\\\
		\midrule
		\endfoot
		\\\\
		\bottomrule
		\endlastfoot
		$0
	\end{longtable}

snippet fig "\usepackage{graphicx}" b
	\begin{figure}
		\centering
		\includegraphics[
			width=${1:0.8}\linewidth,
		]{images/$2.png}
		\caption{$3}%
		\label{fig:$2}
	\end{figure}
snippet stand "\usepackage{standalone}" b
	\begin{figure}
		\centering
		\includestandalone{figures/$1}
		\caption{$2}%
		\label{fig:$1}
	\end{figure}
snippet csv "\usepackage{csvsimple, booktab}" b
	\begin{table}
		\centering
		\caption{$1}%
		\label{tab:$2}
		\csvautobooktabular[respect percent]{tables/$2.csv}
	\end{table}
snippet vplayer "\usepackage[playbutton=fancy, passcontext, transparent]{media9, graphicx, shellesc}" b
	\begin{figure}
		\centering
		\includemedia[
			width=${1:0.8}\linewidth,
			addresource=media/$2.mp4,
			flashvars={%
				source=media/$2.mp4
			},
		]{%
			\IfFileExists{./media/$2.png}{}{%
				\ShellEscape{ffmpeg -i media/$2.mp4 -t 1 -frames:v 1 media/$2.png}
			}
			\includegraphics[
				width=0.8\linewidth,
			]{media/$2.png}
		}{VPlayer.swf}
		\caption{$3}%
		\label{fig:$2}
	\end{figure}
	# okular cannot support APlayer.swf
snippet aplayer "\usepackage[playbutton=fancy, passcontext, transparent]{media9, fontawesome5}" b
	\begin{figure}
		\centering
		\includemedia[
			addresource=media/$1.mp3,
			flashvars={%
				source=media/$1.mp3
			},
		]{%
			\faIcon{volume-up}
		}{APlayer9.swf}
		\caption{$2}%
		\label{fig:$1}
	\end{figure}
snippet animate "\usepackage[autoplay, loop]{animate, graphicx, shellesc}" b
	\begin{figure}
		\centering
		\IfFileExists{./media/$1.pdf}{}{%
			\ShellEscape{convert media/$1.gif -coalesce media/$1.pdf}
		}
		\animategraphics[
			width=${2:0.8}\linewidth,
		]{${3:24}}{media/$1}{}{}
		\caption{$4}%
		\label{fig:$1}
	\end{figure}
snippet subf "\usepackage{subcaption, graphicx}" b
	\begin{subfigure}{${1:0.45}\linewidth}
		\centering
		\includegraphics[
			width=\linewidth,
		]{images/$2.png}
		\caption{$3}%
		\label{fig:$2}
	\end{subfigure}
	${0:\quad}
snippet subt "\usepackage{subcaption, csvsimple, booktabs}" b
	\begin{subtable}{0.45\linewidth}
		\centering
		\caption{$1}%
		\label{tab:$2}
		\csvautobooktabular[respect percent]{tables/$2.csv}
	\end{subtable}
	${0:\quad}
snippet wrapf "\usepackage{wrapfig}" b
	\begin{wrapfigure}{${1:r}}{${2:0.2}\linewidth}
		\centering
		\includegraphics[
			width=\linewidth,
		]{images/$1.png}
		\caption{$2}%
		\label{fig:$1}
	\end{wrapfigure}
snippet wrapt "\usepackage{wrapfig}" b
	\begin{wraptable}{${1:r}}{${2:0.2}\linewidth}
		\centering
		$0
		\caption{$2}%
		\label{tab:$1}
	\end{wraptable}
snippet overpic "\usepackage{overpic}" b
	\begin{overpic}[
		width=\linewidth,
		grid,
	]{images/$1.png}
		\put($0)
	\end{overpic}
snippet Overpic "\usepackage{overpic}" b
	\begin{Overpic}[
		width=\linewidth,
		grid,
	]{$1}
		\put($0)
	\end{Overpic}
snippet tikz "\documentclass[tikz]{standalone}" b
	\begin{tikzpicture}$1
		$0
	\end{tikzpicture}
snippet scope "\documentclass[tikz]{standalone}" b
	\begin{scope}$1
		$0
	\end{scope}
snippet alg "\usepackage[linesnumbered, ruled]{algorithm2e}" b
	\begin{algorithm}
		\caption{$1}%
		\label{alg:$2}
		\KwIn{$3}
		\KwOut{$4}
		$0
		\KwRet{$4}
	\end{algorithm}
snippet list "\usepackage[langlinenos]{minted}\setminted{linenos, mathescape, autogobble, breaklines, breakanywhere, frame=single}" b
	\begin{listing}
		\inputminted[label=$2.py]{${1:python}}{listings/$2.py}
		\caption{$3}%
		\label{lst:$2}
	\end{listing}

snippet al "\usepackage{mathtools}" b
	\begin{align}
		\label{eq:$1}
		$0
	\end{align}
snippet subn "\usepackage{cases}" b
	\begin{subnumcases}{$1}%
		\label{eq:$2}
		$0
	\end{subnumcases}

snippet bash "\usepackage{bashful}" b
	\bash[script, stdout, stderr$1]
	$0
	\END
snippet py "\usepackage{pythontex}" b
	\begin{pyconsole}
	$0
	\end{pyconsole}

	global !p
	texMathZones = [
	    "texMathZone" + x for x in [
	        "A", "AS", "B", "BS", "C", "CS", "D", "DS", "E", "ES", "F", "FS", "G",
	        "GS", "H", "HS", "I", "IS", "J", "JS", "K", "KS", "L", "LS", "DS", "V",
	        "W", "X", "Y", "Z"
	    ]
	]
	texIgnoreMathZones = ["texMathText"]
	texMathZoneIds = vim.eval("map(" + str(texMathZones) + ", 'hlID(v:val)')")
	texIgnoreMathZoneIds = vim.eval("map(" + str(texIgnoreMathZones) + ", 'hlID(v:val)')")
	ignore = texIgnoreMathZoneIds[0]
	def math():
	    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	    try:
	        first = next(
	            i for i in reversed(synstackids)
	            if i in texIgnoreMathZoneIds or i in texMathZoneIds
	        )
	        return first != ignore
	    except StopIteration:
	        return False
	endglobal

snippet ali "myUltiSnips" i
	\begin{aligned}
	$0
	\end{aligned}
snippet cases "myUltiSnips" i
	\begin{cases}
	$0
	\end{cases}
snippet matrix "myUltiSnips" i
	\begin{matrix}
	$0
	\end{matrix}
snippet bmat "myUltiSnips" i
	\begin{bmatrix}
	$0
	\end{bmatrix}
snippet Bmat "myUltiSnips" i
	\begin{Bmatrix}
	$0
	\end{Bmatrix}
snippet pmat "myUltiSnips" i
	\begin{pmatrix}
	$0
	\end{pmatrix}
snippet vmat "myUltiSnips" i
	\begin{vmatrix}
	$0
	\end{vmatrix}
snippet Vmat "myUltiSnips" i
	\begin{Vmatrix}
	$0
	\end{Vmatrix}
